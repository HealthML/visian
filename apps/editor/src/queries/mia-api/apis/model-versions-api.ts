/* tslint:disable */
/* eslint-disable */
/**
 * Annotation Service
 * A service to make medical image annotation as enjoyable as possible.
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { ModelVersion } from "../models";
/**
 * ModelVersionsApi - axios parameter creator
 * @export
 */
export const ModelVersionsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Retrieves a list of all available models and their versions. If no model versions are available, it returns an empty array.
     * @param {Array<string>} [versionTags] Key value pair of a model version tag which can be specified as &#x60;versionTags[key]&#x3D;value&#x60;. Filtering by multiple tags is possible by chaining key value pairs with &#x60;versionTags[modality]&#x3D;T2&amp;versionTags[bodypart]&#x3D;Abdomen&#x60;. If at least one version tag in an invalid format is provided, it returns an error.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelsControllerFindAll: async (
      versionTags?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/model-versions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (versionTags) {
        localVarQueryParameter["versionTags"] = versionTags;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a model, if a valid name and version was provided. Otherwise it returns an error.
     * @param {string} name The name of the model.
     * @param {string} version The version of the model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modelsControllerFindVersion: async (
      name: string,
      version: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      if (name === null || name === undefined) {
        throw new RequiredError(
          "name",
          "Required parameter name was null or undefined when calling modelsControllerFindVersion.",
        );
      }
      // verify required parameter 'version' is not null or undefined
      if (version === null || version === undefined) {
        throw new RequiredError(
          "version",
          "Required parameter version was null or undefined when calling modelsControllerFindVersion.",
        );
      }
      const localVarPath = `/model-versions/{name}/{version}`
        .replace(`{${"name"}}`, encodeURIComponent(String(name)))
        .replace(`{${"version"}}`, encodeURIComponent(String(version)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ModelVersionsApi - functional programming interface
 * @export
 */
export const ModelVersionsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Retrieves a list of all available models and their versions. If no model versions are available, it returns an empty array.
     * @param {Array<string>} [versionTags] Key value pair of a model version tag which can be specified as &#x60;versionTags[key]&#x3D;value&#x60;. Filtering by multiple tags is possible by chaining key value pairs with &#x60;versionTags[modality]&#x3D;T2&amp;versionTags[bodypart]&#x3D;Abdomen&#x60;. If at least one version tag in an invalid format is provided, it returns an error.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelsControllerFindAll(
      versionTags?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<ModelVersion>>>
    > {
      const localVarAxiosArgs = await ModelVersionsApiAxiosParamCreator(
        configuration,
      ).modelsControllerFindAll(versionTags, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieves a model, if a valid name and version was provided. Otherwise it returns an error.
     * @param {string} name The name of the model.
     * @param {string} version The version of the model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelsControllerFindVersion(
      name: string,
      version: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<ModelVersion>>
    > {
      const localVarAxiosArgs = await ModelVersionsApiAxiosParamCreator(
        configuration,
      ).modelsControllerFindVersion(name, version, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * ModelVersionsApi - factory interface
 * @export
 */
export const ModelVersionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * Retrieves a list of all available models and their versions. If no model versions are available, it returns an empty array.
     * @param {Array<string>} [versionTags] Key value pair of a model version tag which can be specified as &#x60;versionTags[key]&#x3D;value&#x60;. Filtering by multiple tags is possible by chaining key value pairs with &#x60;versionTags[modality]&#x3D;T2&amp;versionTags[bodypart]&#x3D;Abdomen&#x60;. If at least one version tag in an invalid format is provided, it returns an error.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelsControllerFindAll(
      versionTags?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<ModelVersion>>> {
      return ModelVersionsApiFp(configuration)
        .modelsControllerFindAll(versionTags, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a model, if a valid name and version was provided. Otherwise it returns an error.
     * @param {string} name The name of the model.
     * @param {string} version The version of the model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async modelsControllerFindVersion(
      name: string,
      version: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<ModelVersion>> {
      return ModelVersionsApiFp(configuration)
        .modelsControllerFindVersion(name, version, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ModelVersionsApi - object-oriented interface
 * @export
 * @class ModelVersionsApi
 * @extends {BaseAPI}
 */
export class ModelVersionsApi extends BaseAPI {
  /**
   * Retrieves a list of all available models and their versions. If no model versions are available, it returns an empty array.
   * @param {Array<string>} [versionTags] Key value pair of a model version tag which can be specified as &#x60;versionTags[key]&#x3D;value&#x60;. Filtering by multiple tags is possible by chaining key value pairs with &#x60;versionTags[modality]&#x3D;T2&amp;versionTags[bodypart]&#x3D;Abdomen&#x60;. If at least one version tag in an invalid format is provided, it returns an error.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelVersionsApi
   */
  public async modelsControllerFindAll(
    versionTags?: Array<string>,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<ModelVersion>>> {
    return ModelVersionsApiFp(this.configuration)
      .modelsControllerFindAll(versionTags, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieves a model, if a valid name and version was provided. Otherwise it returns an error.
   * @param {string} name The name of the model.
   * @param {string} version The version of the model.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModelVersionsApi
   */
  public async modelsControllerFindVersion(
    name: string,
    version: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<ModelVersion>> {
    return ModelVersionsApiFp(this.configuration)
      .modelsControllerFindVersion(name, version, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
