/* tslint:disable */
/* eslint-disable */
/**
 * Annotation Service
 * A service to make medical image annotation as enjoyable as possible.
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { CreateJobDto } from "../models";
import { DeleteAllDto } from "../models";
import { Job } from "../models";
import { Progress } from "../models";
/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Creates a new job and returns it. The created job is automatically added to the job queue. Referenced images can belong to different datasets, however these datasets must all belong to the same project. An error will be thrown if the referenced model, project or some of the referenced images do not exist.
     * @param {CreateJobDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsControllerCreate: async (
      body: CreateJobDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling jobsControllerCreate.",
        );
      }
      const localVarPath = `/jobs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a list of all available jobs. If there do not exist any jobs it will return an empty array. If a project is specified, it will return all jobs belonging to that project. If the project does not exist, it will return an empty array as well.
     * @param {string} [project] The project identifier (uuid) to filter the jobs by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsControllerFindAll: async (
      project?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/jobs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (project !== undefined) {
        localVarQueryParameter["project"] = project;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a job, if a valid identifier was provided. Otherwise it returns an error.
     * @param {string} id The identifier (uuid) of the job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsControllerFindOne: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling jobsControllerFindOne.",
        );
      }
      const localVarPath = `/jobs/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns the log file for a job.
     * @param {string} id The identifier (uuid) of the job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsControllerGetFile: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling jobsControllerGetFile.",
        );
      }
      const localVarPath = `/jobs/{id}/log-file`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns the annotation progress of a job. If the job does not exist, it will return an error.
     * @param {string} id The identifier (uuid) of the job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsControllerProgress: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling jobsControllerProgress.",
        );
      }
      const localVarPath = `/jobs/{id}/progress`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes a job and associated annotations permanently. It cannot be undone. It returns an error if the job can not be found or the delete operation fails.
     * @param {string} id The identifier (uuid) of the job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling jobsControllerRemove.",
        );
      }
      const localVarPath = `/jobs/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes all selected jobs and associated annotations permanently. It cannot be undone. It returns the jobs that were deleted.
     * @param {DeleteAllDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsControllerRemoveAll: async (
      body: DeleteAllDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling jobsControllerRemoveAll.",
        );
      }
      const localVarPath = `/jobs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates the specified job by setting the values of the parameters passed. All parameters not provided will be left unchanged. It returns the updated job, if the update operation succeeds. It returns an error, if a valid order of status transitions was not followed.
     * @param {string} status
     * @param {Blob} file
     * @param {string} id The identifier (uuid) of the job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsControllerUpdateForm: async (
      status: string,
      file: Blob,
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'status' is not null or undefined
      if (status === null || status === undefined) {
        throw new RequiredError(
          "status",
          "Required parameter status was null or undefined when calling jobsControllerUpdateForm.",
        );
      }
      // verify required parameter 'file' is not null or undefined
      if (file === null || file === undefined) {
        throw new RequiredError(
          "file",
          "Required parameter file was null or undefined when calling jobsControllerUpdateForm.",
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling jobsControllerUpdateForm.",
        );
      }
      const localVarPath = `/jobs/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      if (status !== undefined) {
        localVarFormParams.append("status", status as any);
      }

      if (file !== undefined) {
        localVarFormParams.append("file", file as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Creates a new job and returns it. The created job is automatically added to the job queue. Referenced images can belong to different datasets, however these datasets must all belong to the same project. An error will be thrown if the referenced model, project or some of the referenced images do not exist.
     * @param {CreateJobDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerCreate(
      body: CreateJobDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Job>>
    > {
      const localVarAxiosArgs = await JobsApiAxiosParamCreator(
        configuration,
      ).jobsControllerCreate(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieves a list of all available jobs. If there do not exist any jobs it will return an empty array. If a project is specified, it will return all jobs belonging to that project. If the project does not exist, it will return an empty array as well.
     * @param {string} [project] The project identifier (uuid) to filter the jobs by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerFindAll(
      project?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<Job>>>
    > {
      const localVarAxiosArgs = await JobsApiAxiosParamCreator(
        configuration,
      ).jobsControllerFindAll(project, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieves a job, if a valid identifier was provided. Otherwise it returns an error.
     * @param {string} id The identifier (uuid) of the job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerFindOne(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Job>>
    > {
      const localVarAxiosArgs = await JobsApiAxiosParamCreator(
        configuration,
      ).jobsControllerFindOne(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Returns the log file for a job.
     * @param {string} id The identifier (uuid) of the job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerGetFile(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>
    > {
      const localVarAxiosArgs = await JobsApiAxiosParamCreator(
        configuration,
      ).jobsControllerGetFile(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Returns the annotation progress of a job. If the job does not exist, it will return an error.
     * @param {string} id The identifier (uuid) of the job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerProgress(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Progress>>
    > {
      const localVarAxiosArgs = await JobsApiAxiosParamCreator(
        configuration,
      ).jobsControllerProgress(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Deletes a job and associated annotations permanently. It cannot be undone. It returns an error if the job can not be found or the delete operation fails.
     * @param {string} id The identifier (uuid) of the job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerRemove(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await JobsApiAxiosParamCreator(
        configuration,
      ).jobsControllerRemove(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Deletes all selected jobs and associated annotations permanently. It cannot be undone. It returns the jobs that were deleted.
     * @param {DeleteAllDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerRemoveAll(
      body: DeleteAllDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await JobsApiAxiosParamCreator(
        configuration,
      ).jobsControllerRemoveAll(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Updates the specified job by setting the values of the parameters passed. All parameters not provided will be left unchanged. It returns the updated job, if the update operation succeeds. It returns an error, if a valid order of status transitions was not followed.
     * @param {string} status
     * @param {Blob} file
     * @param {string} id The identifier (uuid) of the job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerUpdateForm(
      status: string,
      file: Blob,
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Job>>
    > {
      const localVarAxiosArgs = await JobsApiAxiosParamCreator(
        configuration,
      ).jobsControllerUpdateForm(status, file, id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * Creates a new job and returns it. The created job is automatically added to the job queue. Referenced images can belong to different datasets, however these datasets must all belong to the same project. An error will be thrown if the referenced model, project or some of the referenced images do not exist.
     * @param {CreateJobDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerCreate(
      body: CreateJobDto,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Job>> {
      return JobsApiFp(configuration)
        .jobsControllerCreate(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a list of all available jobs. If there do not exist any jobs it will return an empty array. If a project is specified, it will return all jobs belonging to that project. If the project does not exist, it will return an empty array as well.
     * @param {string} [project] The project identifier (uuid) to filter the jobs by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerFindAll(
      project?: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<Job>>> {
      return JobsApiFp(configuration)
        .jobsControllerFindAll(project, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a job, if a valid identifier was provided. Otherwise it returns an error.
     * @param {string} id The identifier (uuid) of the job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerFindOne(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Job>> {
      return JobsApiFp(configuration)
        .jobsControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns the log file for a job.
     * @param {string} id The identifier (uuid) of the job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerGetFile(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Blob>> {
      return JobsApiFp(configuration)
        .jobsControllerGetFile(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns the annotation progress of a job. If the job does not exist, it will return an error.
     * @param {string} id The identifier (uuid) of the job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerProgress(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Progress>> {
      return JobsApiFp(configuration)
        .jobsControllerProgress(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes a job and associated annotations permanently. It cannot be undone. It returns an error if the job can not be found or the delete operation fails.
     * @param {string} id The identifier (uuid) of the job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerRemove(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return JobsApiFp(configuration)
        .jobsControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes all selected jobs and associated annotations permanently. It cannot be undone. It returns the jobs that were deleted.
     * @param {DeleteAllDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerRemoveAll(
      body: DeleteAllDto,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return JobsApiFp(configuration)
        .jobsControllerRemoveAll(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates the specified job by setting the values of the parameters passed. All parameters not provided will be left unchanged. It returns the updated job, if the update operation succeeds. It returns an error, if a valid order of status transitions was not followed.
     * @param {string} status
     * @param {Blob} file
     * @param {string} id The identifier (uuid) of the job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async jobsControllerUpdateForm(
      status: string,
      file: Blob,
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Job>> {
      return JobsApiFp(configuration)
        .jobsControllerUpdateForm(status, file, id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI {
  /**
   * Creates a new job and returns it. The created job is automatically added to the job queue. Referenced images can belong to different datasets, however these datasets must all belong to the same project. An error will be thrown if the referenced model, project or some of the referenced images do not exist.
   * @param {CreateJobDto} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobsApi
   */
  public async jobsControllerCreate(
    body: CreateJobDto,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Job>> {
    return JobsApiFp(this.configuration)
      .jobsControllerCreate(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieves a list of all available jobs. If there do not exist any jobs it will return an empty array. If a project is specified, it will return all jobs belonging to that project. If the project does not exist, it will return an empty array as well.
   * @param {string} [project] The project identifier (uuid) to filter the jobs by.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobsApi
   */
  public async jobsControllerFindAll(
    project?: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<Job>>> {
    return JobsApiFp(this.configuration)
      .jobsControllerFindAll(project, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieves a job, if a valid identifier was provided. Otherwise it returns an error.
   * @param {string} id The identifier (uuid) of the job.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobsApi
   */
  public async jobsControllerFindOne(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Job>> {
    return JobsApiFp(this.configuration)
      .jobsControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Returns the log file for a job.
   * @param {string} id The identifier (uuid) of the job.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobsApi
   */
  public async jobsControllerGetFile(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Blob>> {
    return JobsApiFp(this.configuration)
      .jobsControllerGetFile(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Returns the annotation progress of a job. If the job does not exist, it will return an error.
   * @param {string} id The identifier (uuid) of the job.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobsApi
   */
  public async jobsControllerProgress(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Progress>> {
    return JobsApiFp(this.configuration)
      .jobsControllerProgress(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Deletes a job and associated annotations permanently. It cannot be undone. It returns an error if the job can not be found or the delete operation fails.
   * @param {string} id The identifier (uuid) of the job.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobsApi
   */
  public async jobsControllerRemove(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return JobsApiFp(this.configuration)
      .jobsControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Deletes all selected jobs and associated annotations permanently. It cannot be undone. It returns the jobs that were deleted.
   * @param {DeleteAllDto} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobsApi
   */
  public async jobsControllerRemoveAll(
    body: DeleteAllDto,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return JobsApiFp(this.configuration)
      .jobsControllerRemoveAll(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Updates the specified job by setting the values of the parameters passed. All parameters not provided will be left unchanged. It returns the updated job, if the update operation succeeds. It returns an error, if a valid order of status transitions was not followed.
   * @param {string} status
   * @param {Blob} file
   * @param {string} id The identifier (uuid) of the job.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobsApi
   */
  public async jobsControllerUpdateForm(
    status: string,
    file: Blob,
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Job>> {
    return JobsApiFp(this.configuration)
      .jobsControllerUpdateForm(status, file, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
