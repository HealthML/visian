/* tslint:disable */
/* eslint-disable */
/**
 * Annotation Service
 * A service to make medical image annotation as enjoyable as possible.
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { CreateProjectDto } from "../models";
import { DeleteAllDto } from "../models";
import { Project } from "../models";
import { UpdateProjectDto } from "../models";
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Creates a new project and returns it.
     * @param {CreateProjectDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsControllerCreate: async (
      body: CreateProjectDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling projectsControllerCreate.",
        );
      }
      const localVarPath = `/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a list of all available projects. If there are no projects it will return an empty array.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsControllerFindAll: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a project, if a valid identifier was provided. Otherwise it returns an error.
     * @param {string} id The identifier (uuid) of the project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsControllerFindOne: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling projectsControllerFindOne.",
        );
      }
      const localVarPath = `/projects/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes a project and all associated jobs, datasets, images and annotations permanently. It cannot be undone. It returns an error if the project can not be found or the delete operation fails.
     * @param {string} id The identifier (uuid) of the project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling projectsControllerRemove.",
        );
      }
      const localVarPath = `/projects/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes all selected projects and their associated jobs, datasets, images and annotations permanently. It cannot be undone. It returns the project that were deleted.
     * @param {DeleteAllDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsControllerRemoveAll: async (
      body: DeleteAllDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling projectsControllerRemoveAll.",
        );
      }
      const localVarPath = `/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates the specified project by setting the values of the parameters passed. It returns the updated project, if the update operation succeeds. Otherwise it returns an error.
     * @param {UpdateProjectDto} body
     * @param {string} id The identifier (uuid) of the project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsControllerUpdate: async (
      body: UpdateProjectDto,
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling projectsControllerUpdate.",
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling projectsControllerUpdate.",
        );
      }
      const localVarPath = `/projects/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Creates a new project and returns it.
     * @param {CreateProjectDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectsControllerCreate(
      body: CreateProjectDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Project>>
    > {
      const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(
        configuration,
      ).projectsControllerCreate(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieves a list of all available projects. If there are no projects it will return an empty array.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectsControllerFindAll(
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<Project>>>
    > {
      const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(
        configuration,
      ).projectsControllerFindAll(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieves a project, if a valid identifier was provided. Otherwise it returns an error.
     * @param {string} id The identifier (uuid) of the project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectsControllerFindOne(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Project>>
    > {
      const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(
        configuration,
      ).projectsControllerFindOne(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Deletes a project and all associated jobs, datasets, images and annotations permanently. It cannot be undone. It returns an error if the project can not be found or the delete operation fails.
     * @param {string} id The identifier (uuid) of the project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectsControllerRemove(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(
        configuration,
      ).projectsControllerRemove(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Deletes all selected projects and their associated jobs, datasets, images and annotations permanently. It cannot be undone. It returns the project that were deleted.
     * @param {DeleteAllDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectsControllerRemoveAll(
      body: DeleteAllDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(
        configuration,
      ).projectsControllerRemoveAll(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Updates the specified project by setting the values of the parameters passed. It returns the updated project, if the update operation succeeds. Otherwise it returns an error.
     * @param {UpdateProjectDto} body
     * @param {string} id The identifier (uuid) of the project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectsControllerUpdate(
      body: UpdateProjectDto,
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Project>>
    > {
      const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(
        configuration,
      ).projectsControllerUpdate(body, id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * Creates a new project and returns it.
     * @param {CreateProjectDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectsControllerCreate(
      body: CreateProjectDto,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Project>> {
      return ProjectsApiFp(configuration)
        .projectsControllerCreate(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a list of all available projects. If there are no projects it will return an empty array.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectsControllerFindAll(
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<Project>>> {
      return ProjectsApiFp(configuration)
        .projectsControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a project, if a valid identifier was provided. Otherwise it returns an error.
     * @param {string} id The identifier (uuid) of the project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectsControllerFindOne(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Project>> {
      return ProjectsApiFp(configuration)
        .projectsControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes a project and all associated jobs, datasets, images and annotations permanently. It cannot be undone. It returns an error if the project can not be found or the delete operation fails.
     * @param {string} id The identifier (uuid) of the project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectsControllerRemove(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return ProjectsApiFp(configuration)
        .projectsControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes all selected projects and their associated jobs, datasets, images and annotations permanently. It cannot be undone. It returns the project that were deleted.
     * @param {DeleteAllDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectsControllerRemoveAll(
      body: DeleteAllDto,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return ProjectsApiFp(configuration)
        .projectsControllerRemoveAll(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates the specified project by setting the values of the parameters passed. It returns the updated project, if the update operation succeeds. Otherwise it returns an error.
     * @param {UpdateProjectDto} body
     * @param {string} id The identifier (uuid) of the project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async projectsControllerUpdate(
      body: UpdateProjectDto,
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Project>> {
      return ProjectsApiFp(configuration)
        .projectsControllerUpdate(body, id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
  /**
   * Creates a new project and returns it.
   * @param {CreateProjectDto} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public async projectsControllerCreate(
    body: CreateProjectDto,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Project>> {
    return ProjectsApiFp(this.configuration)
      .projectsControllerCreate(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieves a list of all available projects. If there are no projects it will return an empty array.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public async projectsControllerFindAll(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<Project>>> {
    return ProjectsApiFp(this.configuration)
      .projectsControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieves a project, if a valid identifier was provided. Otherwise it returns an error.
   * @param {string} id The identifier (uuid) of the project.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public async projectsControllerFindOne(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Project>> {
    return ProjectsApiFp(this.configuration)
      .projectsControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Deletes a project and all associated jobs, datasets, images and annotations permanently. It cannot be undone. It returns an error if the project can not be found or the delete operation fails.
   * @param {string} id The identifier (uuid) of the project.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public async projectsControllerRemove(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return ProjectsApiFp(this.configuration)
      .projectsControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Deletes all selected projects and their associated jobs, datasets, images and annotations permanently. It cannot be undone. It returns the project that were deleted.
   * @param {DeleteAllDto} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public async projectsControllerRemoveAll(
    body: DeleteAllDto,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return ProjectsApiFp(this.configuration)
      .projectsControllerRemoveAll(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Updates the specified project by setting the values of the parameters passed. It returns the updated project, if the update operation succeeds. Otherwise it returns an error.
   * @param {UpdateProjectDto} body
   * @param {string} id The identifier (uuid) of the project.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectsApi
   */
  public async projectsControllerUpdate(
    body: UpdateProjectDto,
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Project>> {
    return ProjectsApiFp(this.configuration)
      .projectsControllerUpdate(body, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
