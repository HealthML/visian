/* tslint:disable */
/* eslint-disable */
/**
 * Annotation Service
 * A service to make medical image annotation as enjoyable as possible.
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
import { CreateDatasetDto } from "../models";
import { Dataset } from "../models";
import { DeleteAllDto } from "../models";
import { Progress } from "../models";
import { UpdateDatasetDto } from "../models";
/**
 * DatasetsApi - axios parameter creator
 * @export
 */
export const DatasetsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Creates a new dataset and returns it. An error will be thrown if the referenced project does not exist.
     * @param {CreateDatasetDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetsControllerCreate: async (
      body: CreateDatasetDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling datasetsControllerCreate.",
        );
      }
      const localVarPath = `/datasets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a list of all available datasets. If there do not exist any datasets it will return an empty array. If a project is specified, it will return all datasets in the project. If the project does not exist, it will return an empty array as well.
     * @param {string} [project] The project identifier (uuid) to filter the datasets by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetsControllerFindAll: async (
      project?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/datasets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (project !== undefined) {
        localVarQueryParameter["project"] = project;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a dataset, if a valid identifier was provided. Otherwise it returns an error.
     * @param {string} id The identifier (uuid) of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetsControllerFindOne: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling datasetsControllerFindOne.",
        );
      }
      const localVarPath = `/datasets/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns the annotation progress of a dataset. If the dataset does not exist, it will return an error.
     * @param {string} id The identifier (uuid) of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetsControllerProgress: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling datasetsControllerProgress.",
        );
      }
      const localVarPath = `/datasets/{id}/progress`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes a dataset and associated images and their annotations permanently. It cannot be undone. It returns an error if the dataset can not be found or the delete operation fails.
     * @param {string} id The identifier (uuid) of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetsControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling datasetsControllerRemove.",
        );
      }
      const localVarPath = `/datasets/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes all selected datasets and associated images and their annotations permanently. It cannot be undone. It returns the datasets that were deleted.
     * @param {DeleteAllDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetsControllerRemoveAll: async (
      body: DeleteAllDto,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling datasetsControllerRemoveAll.",
        );
      }
      const localVarPath = `/datasets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates the specified dataset by setting the values of the parameters passed. It returns the updated dataset, if the update operation succeeds. An error will be thrown if the referenced project does not exist.
     * @param {UpdateDatasetDto} body
     * @param {string} id The identifier (uuid) of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    datasetsControllerUpdate: async (
      body: UpdateDatasetDto,
      id: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          "body",
          "Required parameter body was null or undefined when calling datasetsControllerUpdate.",
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling datasetsControllerUpdate.",
        );
      }
      const localVarPath = `/datasets/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, "https://example.com");
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || "";

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DatasetsApi - functional programming interface
 * @export
 */
export const DatasetsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Creates a new dataset and returns it. An error will be thrown if the referenced project does not exist.
     * @param {CreateDatasetDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async datasetsControllerCreate(
      body: CreateDatasetDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Dataset>>
    > {
      const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(
        configuration,
      ).datasetsControllerCreate(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieves a list of all available datasets. If there do not exist any datasets it will return an empty array. If a project is specified, it will return all datasets in the project. If the project does not exist, it will return an empty array as well.
     * @param {string} [project] The project identifier (uuid) to filter the datasets by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async datasetsControllerFindAll(
      project?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Array<Dataset>>>
    > {
      const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(
        configuration,
      ).datasetsControllerFindAll(project, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieves a dataset, if a valid identifier was provided. Otherwise it returns an error.
     * @param {string} id The identifier (uuid) of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async datasetsControllerFindOne(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Dataset>>
    > {
      const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(
        configuration,
      ).datasetsControllerFindOne(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Returns the annotation progress of a dataset. If the dataset does not exist, it will return an error.
     * @param {string} id The identifier (uuid) of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async datasetsControllerProgress(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Progress>>
    > {
      const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(
        configuration,
      ).datasetsControllerProgress(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Deletes a dataset and associated images and their annotations permanently. It cannot be undone. It returns an error if the dataset can not be found or the delete operation fails.
     * @param {string} id The identifier (uuid) of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async datasetsControllerRemove(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(
        configuration,
      ).datasetsControllerRemove(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Deletes all selected datasets and associated images and their annotations permanently. It cannot be undone. It returns the datasets that were deleted.
     * @param {DeleteAllDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async datasetsControllerRemoveAll(
      body: DeleteAllDto,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(
        configuration,
      ).datasetsControllerRemoveAll(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Updates the specified dataset by setting the values of the parameters passed. It returns the updated dataset, if the update operation succeeds. An error will be thrown if the referenced project does not exist.
     * @param {UpdateDatasetDto} body
     * @param {string} id The identifier (uuid) of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async datasetsControllerUpdate(
      body: UpdateDatasetDto,
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => Promise<AxiosResponse<Dataset>>
    > {
      const localVarAxiosArgs = await DatasetsApiAxiosParamCreator(
        configuration,
      ).datasetsControllerUpdate(body, id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DatasetsApi - factory interface
 * @export
 */
export const DatasetsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * Creates a new dataset and returns it. An error will be thrown if the referenced project does not exist.
     * @param {CreateDatasetDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async datasetsControllerCreate(
      body: CreateDatasetDto,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Dataset>> {
      return DatasetsApiFp(configuration)
        .datasetsControllerCreate(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a list of all available datasets. If there do not exist any datasets it will return an empty array. If a project is specified, it will return all datasets in the project. If the project does not exist, it will return an empty array as well.
     * @param {string} [project] The project identifier (uuid) to filter the datasets by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async datasetsControllerFindAll(
      project?: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<Dataset>>> {
      return DatasetsApiFp(configuration)
        .datasetsControllerFindAll(project, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a dataset, if a valid identifier was provided. Otherwise it returns an error.
     * @param {string} id The identifier (uuid) of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async datasetsControllerFindOne(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Dataset>> {
      return DatasetsApiFp(configuration)
        .datasetsControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns the annotation progress of a dataset. If the dataset does not exist, it will return an error.
     * @param {string} id The identifier (uuid) of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async datasetsControllerProgress(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Progress>> {
      return DatasetsApiFp(configuration)
        .datasetsControllerProgress(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes a dataset and associated images and their annotations permanently. It cannot be undone. It returns an error if the dataset can not be found or the delete operation fails.
     * @param {string} id The identifier (uuid) of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async datasetsControllerRemove(
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return DatasetsApiFp(configuration)
        .datasetsControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes all selected datasets and associated images and their annotations permanently. It cannot be undone. It returns the datasets that were deleted.
     * @param {DeleteAllDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async datasetsControllerRemoveAll(
      body: DeleteAllDto,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return DatasetsApiFp(configuration)
        .datasetsControllerRemoveAll(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates the specified dataset by setting the values of the parameters passed. It returns the updated dataset, if the update operation succeeds. An error will be thrown if the referenced project does not exist.
     * @param {UpdateDatasetDto} body
     * @param {string} id The identifier (uuid) of the dataset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async datasetsControllerUpdate(
      body: UpdateDatasetDto,
      id: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Dataset>> {
      return DatasetsApiFp(configuration)
        .datasetsControllerUpdate(body, id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DatasetsApi - object-oriented interface
 * @export
 * @class DatasetsApi
 * @extends {BaseAPI}
 */
export class DatasetsApi extends BaseAPI {
  /**
   * Creates a new dataset and returns it. An error will be thrown if the referenced project does not exist.
   * @param {CreateDatasetDto} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DatasetsApi
   */
  public async datasetsControllerCreate(
    body: CreateDatasetDto,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Dataset>> {
    return DatasetsApiFp(this.configuration)
      .datasetsControllerCreate(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieves a list of all available datasets. If there do not exist any datasets it will return an empty array. If a project is specified, it will return all datasets in the project. If the project does not exist, it will return an empty array as well.
   * @param {string} [project] The project identifier (uuid) to filter the datasets by.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DatasetsApi
   */
  public async datasetsControllerFindAll(
    project?: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<Dataset>>> {
    return DatasetsApiFp(this.configuration)
      .datasetsControllerFindAll(project, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieves a dataset, if a valid identifier was provided. Otherwise it returns an error.
   * @param {string} id The identifier (uuid) of the dataset.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DatasetsApi
   */
  public async datasetsControllerFindOne(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Dataset>> {
    return DatasetsApiFp(this.configuration)
      .datasetsControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Returns the annotation progress of a dataset. If the dataset does not exist, it will return an error.
   * @param {string} id The identifier (uuid) of the dataset.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DatasetsApi
   */
  public async datasetsControllerProgress(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Progress>> {
    return DatasetsApiFp(this.configuration)
      .datasetsControllerProgress(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Deletes a dataset and associated images and their annotations permanently. It cannot be undone. It returns an error if the dataset can not be found or the delete operation fails.
   * @param {string} id The identifier (uuid) of the dataset.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DatasetsApi
   */
  public async datasetsControllerRemove(
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return DatasetsApiFp(this.configuration)
      .datasetsControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Deletes all selected datasets and associated images and their annotations permanently. It cannot be undone. It returns the datasets that were deleted.
   * @param {DeleteAllDto} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DatasetsApi
   */
  public async datasetsControllerRemoveAll(
    body: DeleteAllDto,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return DatasetsApiFp(this.configuration)
      .datasetsControllerRemoveAll(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Updates the specified dataset by setting the values of the parameters passed. It returns the updated dataset, if the update operation succeeds. An error will be thrown if the referenced project does not exist.
   * @param {UpdateDatasetDto} body
   * @param {string} id The identifier (uuid) of the dataset.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DatasetsApi
   */
  public async datasetsControllerUpdate(
    body: UpdateDatasetDto,
    id: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Dataset>> {
    return DatasetsApiFp(this.configuration)
      .datasetsControllerUpdate(body, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
