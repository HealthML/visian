export interface EventMap extends DocumentEventMap, HTMLElementEventMap {}

/* Event-like interface matching native events & React's synthetic events */
export interface EventLike<E extends string = string> {
  bubbles: boolean;
  cancelable: boolean;
  currentTarget: EventTarget | null;
  defaultPrevented: boolean;
  eventPhase: number;
  isTrusted: boolean;
  preventDefault: () => void;
  stopImmediatePropagation?: () => void;
  stopPropagation: () => void;
  target: EventTarget | null;
  timeStamp: number;
  type: E;
}

/** Devices that can dispatch events to the middleware chain. */
export type DeviceType = "mouse" | "touch" | "pen" | "wheel" | "pointer";

/**
 * An abstraction of event-types to provide a uniform
 * interface for different devices, e.g. mouse/touch.
 */
export type AbstractEventType = "start" | "move" | "end";

/**
 * Pointer button values.
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events
 */
export enum PointerButton {
  Unchanged = -1,
  LMB = 0,
  MMB = 1,
  RMB = 2,
  Back = 3,
  Forward = 4,
  Eraser = 5,
}

export interface PointerContext {
  device: DeviceType;
  identifier: string;
  startTime: DOMTimeStamp | DOMHighResTimeStamp;

  altKey?: boolean;
  button?: PointerButton;
  ctrlKey?: boolean;
  metaKey?: boolean;
  shiftKey?: boolean;

  [key: string]: unknown;
}

export interface PointerDetail {
  event?: EventLike | Touch;

  buttons: number;

  /** Set if this pointer is being cancelled, e.g. due to a pointercancel event. */
  cancel?: boolean;

  clientX: number;
  clientY: number;

  pressure: number;
  scale?: number;
  tiltX: number;
  tiltY: number;
  twist: number;

  [prop: string]: unknown;
}

/**
 * A generic pointer.
 * Represents a (virtual) pointer interaction like mouse or touch point input.
 */
export class Pointer<ID = string> {
  constructor(
    /** The id of the associated domain object. */
    public id: ID,
    /** Pointer detail, stores the current pointer position. */
    public detail: PointerDetail,
    /** Pointer metadata, recorded on pointer creation. */
    public context: PointerContext,
  ) {}
}

/** Event processor data interface (passed to middleware). */
export interface EventData<E extends EventLike = EventLike> {
  /** The original arguments passed to `dispatch`. */
  args: unknown[];

  /** The original event. */
  event: E;
}

/**
 * An extended EventData interface.
 * Most of the pre-built middleware assumes an opinionated middleware
 * chain using this EventData.
 */
export interface PointerEventData<ID = string, E extends EventLike = EventLike>
  extends EventData<E> {
  /**
   * The name of the device that issued the currently processed event.
   * This field should be generated by the `classify` middleware.
   */
  eventOrigin?: DeviceType;

  /**
   * The (abstract) type of the currently processed event.
   * This field should be generated by the `classify` middleware.
   */
  eventType?: AbstractEventType;

  /**
   * The ids of (model) objects this event targets.
   * This field should be generated by the respective device's adapter.
   */
  ids?: ID[];

  /**
   * The pointers derived from this event that can be associated to an entity.
   * This field should be generated by the respective device's adapter.
   */
  pointers?: Pointer<ID>[];

  /**
   * The pointers derived from this event that do not have an id assigned to them.
   * This field should be generated by the respective device's adapter.
   */
  unidentifiedPointers?: Pointer<undefined>[];
}

/** Event processor state extension to capture the current pointers. */
export interface PointerState<ID = string> {
  pointers: { [pointerId: string]: Pointer<ID> };
}

/** Event processor middleware function signature. */
export type EventMiddleware<
  D extends EventData = EventData,
  T = { [key: string]: unknown }
> = (data: D, context: T) => void;

export type IDispatch<ID = string> = (
  event: EventLike,
  id?: ID,
  ...args: unknown[]
) => void;
