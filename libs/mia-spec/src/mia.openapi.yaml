openapi: 3.0.0
paths:
  /projects:
    post:
      operationId: ProjectsController_create
      summary: ''
      description: Creates a new project and returns it.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectDto'
      responses:
        '201':
          description: The resource was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      tags: &ref_0
        - Projects
    get:
      operationId: ProjectsController_findAll
      summary: ''
      description: >-
        Retrieves a list of all available projects. If there are no projects it
        will return an empty array.
      parameters: []
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
      tags: *ref_0
    delete:
      operationId: ProjectsController_removeAll
      summary: ''
      description: >-
        Deletes all selected projects and their associated jobs, datasets,
        images and annotations permanently. It cannot be undone. It returns the
        project that were deleted.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAllDto'
      responses:
        '200':
          description: The request succeeded.
      tags: *ref_0
  /projects/{id}:
    get:
      operationId: ProjectsController_findOne
      summary: ''
      description: >-
        Retrieves a project, if a valid identifier was provided. Otherwise it
        returns an error.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the project.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: The requested resource does not exist.
      tags: *ref_0
    put:
      operationId: ProjectsController_update
      summary: ''
      description: >-
        Updates the specified project by setting the values of the parameters
        passed. It returns the updated project, if the update operation
        succeeds. Otherwise it returns an error.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the project.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectDto'
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: The requested resource does not exist.
      tags: *ref_0
    delete:
      operationId: ProjectsController_remove
      summary: ''
      description: >-
        Deletes a project and all associated jobs, datasets, images and
        annotations permanently. It cannot be undone. It returns an error if the
        project can not be found or the delete operation fails.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the project.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
        '404':
          description: The requested resource does not exist.
      tags: *ref_0
  /datasets:
    post:
      operationId: DatasetsController_create
      summary: ''
      description: >-
        Creates a new dataset and returns it. An error will be thrown if the
        referenced project does not exist.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatasetDto'
      responses:
        '201':
          description: The resource was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        '400':
          description: The request was malformed.
      tags: &ref_1
        - Datasets
    get:
      operationId: DatasetsController_findAll
      summary: ''
      description: >-
        Retrieves a list of all available datasets. If there do not exist any
        datasets it will return an empty array. If a project is specified, it
        will return all datasets in the project. If the project does not exist,
        it will return an empty array as well.
      parameters:
        - name: project
          required: false
          in: query
          description: The project identifier (uuid) to filter the datasets by.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dataset'
      tags: *ref_1
    delete:
      operationId: DatasetsController_removeAll
      summary: ''
      description: >-
        Deletes all selected datasets and associated images and their
        annotations permanently. It cannot be undone. It returns the datasets
        that were deleted.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAllDto'
      responses:
        '200':
          description: The request succeeded.
      tags: *ref_1
  /datasets/{id}:
    get:
      operationId: DatasetsController_findOne
      summary: ''
      description: >-
        Retrieves a dataset, if a valid identifier was provided. Otherwise it
        returns an error.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the dataset.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        '404':
          description: The requested resource does not exist.
      tags: *ref_1
    put:
      operationId: DatasetsController_update
      summary: ''
      description: >-
        Updates the specified dataset by setting the values of the parameters
        passed. It returns the updated dataset, if the update operation
        succeeds. An error will be thrown if the referenced project does not
        exist.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the dataset.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDatasetDto'
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        '404':
          description: The requested resource does not exist.
      tags: *ref_1
    delete:
      operationId: DatasetsController_remove
      summary: ''
      description: >-
        Deletes a dataset and associated images and their annotations
        permanently. It cannot be undone. It returns an error if the dataset can
        not be found or the delete operation fails.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the dataset.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
        '404':
          description: The requested resource does not exist.
      tags: *ref_1
  /datasets/{id}/progress:
    get:
      operationId: DatasetsController_progress
      summary: ''
      description: >-
        Returns the annotation progress of a dataset. If the dataset does not
        exist, it will return an error.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the dataset.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Progress'
        '404':
          description: The requested resource does not exist.
      tags: *ref_1
  /images:
    post:
      operationId: ImagesController_create
      summary: ''
      description: >-
        Creates a new image and returns it. Additionally it saves the optional
        file passed to this endpoint under the image's dataUri. An error will be
        thrown if the referenced dataset does not exist. Trying to create an
        image with the same data URI as an already existing image will also
        result in an error.
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateImageDto'
      responses:
        '201':
          description: The resource was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '400':
          description: The request was malformed.
      tags: &ref_2
        - Images
    get:
      operationId: ImagesController_findAll
      summary: ''
      description: >-
        Retrieves a list of all available images. If there do not exist any
        images it will return an empty array. If a dataset or job is specified,
        it will return all images in the dataset or used by the job. If the
        dataset or job does not exist it will return an empty array.
      parameters:
        - name: dataset
          required: false
          in: query
          description: The dataset identifier (uuid) to filter the images by.
          schema:
            type: string
        - name: job
          required: false
          in: query
          description: The job identifier (uuid) to filter the images by.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
      tags: *ref_2
    delete:
      operationId: ImagesController_removeAll
      summary: ''
      description: >-
        Deletes all selected images and all associated annotations permanently.
        It cannot be undone. It returns the images that were deleted.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAllDto'
      responses:
        '200':
          description: The request succeeded.
      tags: *ref_2
  /images/{id}:
    get:
      operationId: ImagesController_findOne
      summary: ''
      description: >-
        Retrieves an image, if a valid identifier was provided. Otherwise it
        returns an error.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the image.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '404':
          description: The requested resource does not exist.
      tags: *ref_2
    patch:
      operationId: ImagesController_update
      summary: ''
      description: >-
        Updates the specified image by setting the values of the parameters
        passed. Additionally it saves the optional file passed to this endpoint
        under the image's (new) dataUri. It returns the updated image, if the
        update operation succeeds. It returns an error when trying to set the
        image data URI to an already existing image data URI. When changing the
        dataUri, the old file won't be deleted automatically.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the image.
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateImageDto'
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '400':
          description: The request was malformed.
        '404':
          description: The requested resource does not exist.
      tags: *ref_2
    delete:
      operationId: ImagesController_remove
      summary: ''
      description: >-
        Deletes an image and associated annotations permanently. It cannot be
        undone. It returns an error if the image can not be found or the delete
        operation fails.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the image.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
        '404':
          description: The requested resource does not exist.
      tags: *ref_2
  /images/{id}/file:
    get:
      operationId: ImagesController_getFile
      summary: ''
      description: Returns the file for an image.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the image.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
          content:
            appication/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: The requested resource does not exist.
      tags: *ref_2
  /annotations:
    post:
      operationId: AnnotationsController_create
      summary: ''
      description: >-
        Creates a new annotation and returns it. Additionally it saves the
        optional file passed to this endpoint under the annotation's dataUri. An
        error will be thrown if the referenced image does not exist. Trying to
        create an annotation with the same data URI as an already existing
        annotation will also result in an error.
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateAnnotationDto'
      responses:
        '201':
          description: The resource was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
        '400':
          description: The request was malformed.
      tags: &ref_3
        - Annotations
    get:
      operationId: AnnotationsController_findAll
      summary: ''
      description: >-
        Retrieves a list of all available annotations. If there do not exist any
        annotations it will return an empty array. If an image or job is
        specified, it will return all annotations belonging to the image (if
        specified) and generated by the job (if specified). If the image or job
        does not exist it will return an empty array.
      parameters:
        - name: image
          required: false
          in: query
          description: The image identifier (uuid) to filter the annotations by.
          schema:
            type: string
        - name: job
          required: false
          in: query
          description: The job identifier (uuid) to filter the annotations by.
          schema:
            type: string
        - name: verified
          required: false
          in: query
          description: >-
            If set to true, only human-verified annotations are returned. When
            set to false, non-verified annotations are returned. If no value is
            provided, all annotations are returned.
          schema: {}
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Annotation'
      tags: *ref_3
    delete:
      operationId: AnnotationsController_removeAll
      summary: ''
      description: >-
        Deletes all selected annotations permanently. It cannot be undone. It
        returns the annotations that were deleted.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAllDto'
      responses:
        '200':
          description: The request succeeded.
      tags: *ref_3
  /annotations/{id}:
    get:
      operationId: AnnotationsController_findOne
      summary: ''
      description: >-
        Retrieves an annotation, if a valid identifier was provided. Otherwise
        it returns an error.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the annotation.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
        '404':
          description: The requested resource does not exist.
      tags: *ref_3
    patch:
      operationId: AnnotationsController_update
      summary: ''
      description: >-
        Updates the specified annotation by setting the values of the parameters
        passed. Additionally it saves the optional file passed to this endpoint
        under the annotation's (new) dataUri. All parameters not provided will
        be left unchanged. It returns the updated annotation, if the update
        operation succeeds. Otherwise it returns an error. When changing the
        dataUri, the old file won't be deleted automatically.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the annotation.
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateAnnotationDto'
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
        '404':
          description: The requested resource does not exist.
      tags: *ref_3
    delete:
      operationId: AnnotationsController_remove
      summary: ''
      description: >-
        Deletes an annotation permanently. It cannot be undone. It does not
        delete associated images or jobs. It returns an error if the annotation
        can not be found or the delete operation fails.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the annotation.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
        '404':
          description: The requested resource does not exist.
      tags: *ref_3
  /annotations/{id}/file:
    get:
      operationId: AnnotationsController_getFile
      summary: ''
      description: Returns the file for an annotation.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the annotation.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: The requested resource does not exist.
      tags: *ref_3
  /jobs:
    post:
      operationId: JobsController_create
      summary: ''
      description: >-
        Creates a new job and returns it. The created job is automatically added
        to the job queue. Referenced images can belong to different datasets,
        however these datasets must all belong to the same project. An error
        will be thrown if the referenced model, project or some of the
        referenced images do not exist.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobDto'
      responses:
        '201':
          description: The resource was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: The request was malformed.
      tags: &ref_4
        - Jobs
    get:
      operationId: JobsController_findAll
      summary: ''
      description: >-
        Retrieves a list of all available jobs. If there do not exist any jobs
        it will return an empty array. If a project is specified, it will return
        all jobs belonging to that project. If the project does not exist, it
        will return an empty array as well.
      parameters:
        - name: project
          required: false
          in: query
          description: The project identifier (uuid) to filter the jobs by.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
      tags: *ref_4
    delete:
      operationId: JobsController_removeAll
      summary: ''
      description: >-
        Deletes all selected jobs and associated annotations permanently. It
        cannot be undone. It returns the jobs that were deleted.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAllDto'
      responses:
        '200':
          description: The request succeeded.
      tags: *ref_4
  /jobs/{id}:
    get:
      operationId: JobsController_findOne
      summary: ''
      description: >-
        Retrieves a job, if a valid identifier was provided. Otherwise it
        returns an error.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the job.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '404':
          description: The requested resource does not exist.
      tags: *ref_4
    patch:
      operationId: JobsController_update
      summary: ''
      description: >-
        Updates the specified job by setting the values of the parameters
        passed. All parameters not provided will be left unchanged. It returns
        the updated job, if the update operation succeeds. It returns an error,
        if a valid order of status transitions was not followed.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the job.
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateJobDto'
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: >-
            Valid status transitions were not abided by. Valid transitions are
            from `queued` to `running`, `failed` or `canceled` and from
            `running` to `succeeded`, `failed` or `canceled`.
        '404':
          description: The requested resource does not exist.
      tags: *ref_4
    delete:
      operationId: JobsController_remove
      summary: ''
      description: >-
        Deletes a job and associated annotations permanently. It cannot be
        undone. It returns an error if the job can not be found or the delete
        operation fails.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the job.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
        '404':
          description: The requested resource does not exist.
      tags: *ref_4
  /jobs/{id}/log-file:
    get:
      operationId: JobsController_getFile
      summary: ''
      description: Returns the log file for a job.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the job.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: The requested resource does not exist.
      tags: *ref_4
  /jobs/{id}/progress:
    get:
      operationId: JobsController_progress
      summary: ''
      description: >-
        Returns the annotation progress of a job. If the job does not exist, it
        will return an error.
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier (uuid) of the job.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Progress'
        '404':
          description: The requested resource does not exist.
      tags: *ref_4
  /model-versions:
    get:
      operationId: ModelsController_findAll
      summary: ''
      description: >-
        Retrieves a list of all available models and their versions. If no model
        versions are available, it returns an empty array.
      parameters:
        - name: versionTags
          required: false
          in: query
          description: >-
            Key value pair of a model version tag which can be specified as
            `versionTags[key]=value`. Filtering by multiple tags is possible by
            chaining key value pairs with
            `versionTags[modality]=T2&versionTags[bodypart]=Abdomen`. If at
            least one version tag in an invalid format is provided, it returns
            an error.
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModelVersion'
      tags: &ref_5
        - Model Versions
  /model-versions/{name}/{version}:
    get:
      operationId: ModelsController_findVersion
      summary: ''
      description: >-
        Retrieves a model, if a valid name and version was provided. Otherwise
        it returns an error.
      parameters:
        - name: name
          required: true
          in: path
          description: The name of the model.
          schema:
            type: string
        - name: version
          required: true
          in: path
          description: The version of the model.
          schema:
            type: string
      responses:
        '200':
          description: The request succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersion'
        '404':
          description: The requested resource does not exist.
      tags: *ref_5
info:
  title: Annotation Service
  description: A service to make medical image annotation as enjoyable as possible.
  version: '0.1'
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreateProjectDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the project.
      required:
        - name
    Project:
      type: object
      properties:
        id:
          type: string
          description: The identifier (uuid) of the project.
        name:
          type: string
          description: The name of the project.
        createdAt:
          format: date-time
          type: string
          description: The date and time the project was created.
        updatedAt:
          format: date-time
          type: string
          description: The date and time the project was last updated.
      required:
        - id
        - name
        - createdAt
        - updatedAt
    UpdateProjectDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the project.
      required:
        - name
    DeleteAllDto:
      type: object
      properties:
        ids:
          description: The UUIDs of the objects to be deleted.
          type: array
          items:
            type: string
      required:
        - ids
    CreateDatasetDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the dataset.
        project:
          type: string
          description: >-
            The identifier of the project (uuid) that the dataset will belong
            to.
      required:
        - name
        - project
    Dataset:
      type: object
      properties:
        id:
          type: string
          description: The identifier (uuid) of the dataset.
        name:
          type: string
          description: The name of the dataset.
        project:
          type: string
          description: The identifier of the project (uuid) that the dataset belongs to.
        createdAt:
          format: date-time
          type: string
          description: The date and time the project was created.
        updatedAt:
          format: date-time
          type: string
          description: The date and time the project was last updated.
      required:
        - id
        - name
        - project
        - createdAt
        - updatedAt
    UpdateDatasetDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the dataset.
        project:
          type: string
          description: >-
            The identifier of the project (uuid) that the dataset will belong
            to.
      required:
        - name
        - project
    Progress:
      type: object
      properties:
        totalImages:
          type: number
          description: The total number of images in progress of being annotated.
        annotatedImages:
          type: number
          description: The number of annotated images.
        verifiedImages:
          type: number
          description: >-
            The number of annotated images that have at least one verified
            annotation.
      required:
        - totalImages
        - annotatedImages
        - verifiedImages
    CreateImageDto:
      type: object
      properties:
        dataset:
          type: string
          description: The identifier of the dataset (uuid) that the image will belong to.
        dataUri:
          type: string
          description: >-
            The path of the image file relative to the specified data source
            location.
        file:
          type: string
          format: binary
          description: >-
            The image file. Should be passed if the file is not already present
            in the data source.
      required:
        - dataset
        - dataUri
        - file
    Image:
      type: object
      properties:
        id:
          type: string
          description: The identifier (uuid) of the image.
        dataUri:
          type: string
          description: >-
            The path of the image file relative to the specified data source
            location.
        dataset:
          type: string
          description: The identifier of the dataset (uuid) that the image belongs to.
        createdAt:
          format: date-time
          type: string
          description: The date and time the image was created.
        updatedAt:
          format: date-time
          type: string
          description: The date and time the image was last updated.
      required:
        - id
        - dataUri
        - dataset
        - createdAt
        - updatedAt
    UpdateImageDto:
      type: object
      properties:
        dataUri:
          type: string
          description: >-
            The path of the image file relative to the specified data source
            location.
        file:
          type: string
          format: binary
          description: >-
            The image file. Should be passed to update the file referenced by
            the dataUri.
      required:
        - dataUri
        - file
    CreateAnnotationDto:
      type: object
      properties:
        image:
          type: string
          description: >-
            The identifier of the image (uuid) that the annotation will belong
            to.
        job:
          type: string
          description: The identifier of the job (uuid) that the annotation was created by.
        dataUri:
          type: string
          description: >-
            The path of the annotation file relative to the specified data
            source location.
        verified:
          type: boolean
          description: >-
            Indicates whether an annotation has been verified by a human. Set to
            false by default.
        file:
          type: string
          format: binary
          description: >-
            The annotation file. Should be passed if the file is not already
            present in the data source.
      required:
        - image
        - dataUri
    Job:
      type: object
      properties:
        id:
          type: string
          description: The identifier (uuid) of the job.
        project:
          type: string
          description: The name of the project to which the job belongs.
        modelName:
          type: string
          description: The name of the model used to annotate the images.
        modelVersion:
          type: string
          description: The version of the model used to annotate the images.
        status:
          enum:
            - queued
            - running
            - succeeded
            - failed
            - canceled
          type: string
          description: >-
            The current status of the job. By default it is `queued`, which
            means that the job is waiting to be processed. When the job is being
            processed, its status is `running`. When the job is finished, its
            status is `succeeded` or `failed`. The user can also cancel the job,
            which will change its status to `canceled`.
        logFileUri:
          type: string
          description: The path of the log file of the job.
        startedAt:
          format: date-time
          type: string
          description: >-
            The date and time at which the processing of the job was started,
            i.e. the annotation process started. This date will be `null` if the
            job has not been started.
        finishedAt:
          format: date-time
          type: string
          description: >-
            The date and time at which the processing of the job was ended, i.e.
            the annotation process ended. This date will be `null` if the job
            has not yet finished.
        createdAt:
          format: date-time
          type: string
          description: The date and time the job was created.
        updatedAt:
          format: date-time
          type: string
          description: The date and time the job was last updated.
      required:
        - id
        - project
        - modelName
        - modelVersion
        - status
        - logFileUri
        - startedAt
        - finishedAt
        - createdAt
        - updatedAt
    Annotation:
      type: object
      properties:
        id:
          type: string
          description: The identifier (uuid) of the annotation.
        dataUri:
          type: string
          description: >-
            The path of the annotation file relative to the specified data
            source location.
        verified:
          type: boolean
          description: Indicates whether an annotation has been verified by a human.
        image:
          type: string
          description: The identifier of the image (uuid) that the annotation belongs to.
        job:
          description: >-
            The identifier of the job (uuid) that created the annotation. This
            field may be `null` if the annotation was not automatically created
            by a job.
          allOf:
            - $ref: '#/components/schemas/Job'
        createdAt:
          format: date-time
          type: string
          description: The date and time the annotation was created.
        updatedAt:
          format: date-time
          type: string
          description: The date and time the annotation was last updated.
      required:
        - id
        - dataUri
        - verified
        - image
        - job
        - createdAt
        - updatedAt
    UpdateAnnotationDto:
      type: object
      properties:
        dataUri:
          type: string
          description: >-
            The path of the annotation file relative to the specified data
            source location.
        verified:
          type: boolean
          description: >-
            Indicates whether an annotation has been verified by a human. Set to
            false by default.
        file:
          type: string
          format: binary
          description: >-
            The annotation file. Should be passed to update the file referenced
            by the dataUri.
    CreateJobDto:
      type: object
      properties:
        modelName:
          type: string
          description: The name of the model that will be used to annotate images.
        modelVersion:
          type: string
          description: The version of the model that will be used to annotate images.
        project:
          type: string
          description: The identifier of the project (uuid) that the job will belong to.
        images:
          description: >-
            A list of the images that should be annotated. Each image is
            represented by its identifier (uuid).
          type: array
          items:
            type: string
      required:
        - modelName
        - modelVersion
        - project
        - images
    UpdateJobDto:
      type: object
      properties:
        status:
          enum:
            - queued
            - running
            - succeeded
            - failed
            - canceled
          type: string
          description: >-
            The new status of the job. By default, a job is in status `queued`.
            A valid order of transitions is enforced. For example, when the job
            is in status `queued`, it can only be updated to `running`, `failed`
            or `canceled`. From status `running`, it can only be updated to
            `succeeded`, `failed` or `canceled`.
        file:
          type: string
          format: binary
          description: The job log .txt file.
    ModelVersionTag:
      type: object
      properties:
        key:
          type: string
          description: The name of the key.
        value:
          type: string
          description: The name of the value.
      required:
        - key
        - value
    ModelVersion:
      type: object
      properties:
        name:
          type: string
          description: The name of the model.
        version:
          type: string
          description: The version of the model.
        description:
          type: string
          description: The description of the model.
        tags:
          description: The list of model version tags.
          type: array
          items:
            $ref: '#/components/schemas/ModelVersionTag'
        createdAt:
          format: date-time
          type: string
          description: The date and time the model version was created.
        updatedAt:
          format: date-time
          type: string
          description: The date and time the model version was last updated.
      required:
        - name
        - version
        - description
        - tags
        - createdAt
        - updatedAt
